{"version":3,"sources":["../../src/shared/make-memory-monitoring-middleware.js"],"names":["makeMemoryMonitoringMiddleware","server","logger","GAE_MEMORY_MB","MIN_FREE_MB","process","env","info","req","res","next","gaeMemory","parseFloat","minFreeMemory","maxMemory","totalMemory","memoryUsage","rss"],"mappings":";;;;;;;AACA;;AACA;;AAGA;;;;;;;AAOO,MAAMA,8BAA8B,GAAG,CAC1CC,MAD0C,EAE1CC,MAF0C,KAGzC;AACD,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,MAA+BC,OAAO,CAACC,GAA7C;AAEAJ,EAAAA,MAAM,CAACK,IAAP,CAAa,kBAAiBJ,aAAc,EAA5C;AACAD,EAAAA,MAAM,CAACK,IAAP,CAAa,gBAAeH,WAAY,EAAxC;AAEA,SAAO,CAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACvB,UAAMR,MAAM,GAAG,0BAAUM,GAAV,CAAf;AAEAN,IAAAA,MAAM,CAACK,IAAP,CAAY,mBAAZ;;AAEA,QAAI,CAACJ,aAAD,IAAkB,CAACC,WAAvB,EAAoC;AAChCF,MAAAA,MAAM,CAACK,IAAP,CAAY,kBAAZ;AACA,aAAOG,IAAI,EAAX;AACH;;AAEDR,IAAAA,MAAM,CAACK,IAAP,CAAY,kBAAZ;AACA,UAAMI,SAAS,GAAGC,UAAU,CAACT,aAAD,CAAV,GAA4B,IAA5B,GAAmC,IAArD;AACA,UAAMU,aAAa,GAAGD,UAAU,CAACR,WAAD,CAAV,GAA0B,IAA1B,GAAiC,IAAvD;AACA,UAAMU,SAAS,GAAGH,SAAS,GAAGE,aAA9B;AACA,UAAME,WAAW,GAAGV,OAAO,CAACW,WAAR,GAAsBC,GAA1C;AAEAf,IAAAA,MAAM,CAACK,IAAP,CACK,cAAaI,SAAU,oBAAmBE,aAAc,gBAAeC,SAAU,kBAAiBC,WAAY,EADnH,EAhBuB,CAoBvB;AACA;;AACA,QAAIA,WAAW,IAAID,SAAnB,EAA8B;AAC1BZ,MAAAA,MAAM,CAACK,IAAP,CACK,sCAAD,GACK,UAASQ,WAAY,aAAYD,SAAU,EAFpD;AAIAZ,MAAAA,MAAM,CAACK,IAAP,CACK,sCAAD,GACK,UAASQ,WAAY,aAAYD,SAAU,EAFpD;AAIA,8BAASb,MAAT,EAAiBC,MAAjB;AACH,KAVD,MAUO;AACHA,MAAAA,MAAM,CAACK,IAAP,CACK,0CAAD,GACK,UAASQ,WAAY,aAAYD,SAAU,EAFpD;AAIH;;AAEDJ,IAAAA,IAAI;AACP,GAxCD;AAyCH,CAlDM","sourcesContent":["// @flow\nimport {getLogger} from \"../ka-shared/get-logger.js\";\nimport {shutdown} from \"./shutdown.js\";\nimport type {Logger} from \"./types.js\";\n\n/**\n * Check to see if there are ENV variables specified to limit the total\n * memory usage of a process. We look at the GAE_MEMORY_MB and MIN_FREE_MB\n * variables to compute out the maximum amount of memory this process\n * should be using. Then we compare it against what is actually being used\n * and if it's above that threshold we shutdown the server.\n */\nexport const makeMemoryMonitoringMiddleware = (\n    server: http$Server,\n    logger: Logger,\n) => {\n    const {GAE_MEMORY_MB, MIN_FREE_MB} = process.env;\n\n    logger.info(`GAE_MEMORY_MB: ${GAE_MEMORY_MB}`);\n    logger.info(`MIN_FREE_MB: ${MIN_FREE_MB}`);\n\n    return (req, res, next) => {\n        const logger = getLogger(req);\n\n        logger.info(\"INSIDE MIDDLEWARE\");\n\n        if (!GAE_MEMORY_MB || !MIN_FREE_MB) {\n            logger.info(\"ENVs DON'T EXIST\");\n            return next();\n        }\n\n        logger.info(\"USING MIDDLEWARE\");\n        const gaeMemory = parseFloat(GAE_MEMORY_MB) * 1024 * 1024;\n        const minFreeMemory = parseFloat(MIN_FREE_MB) * 1024 * 1024;\n        const maxMemory = gaeMemory - minFreeMemory;\n        const totalMemory = process.memoryUsage().rss;\n\n        logger.info(\n            `gaeMemory: ${gaeMemory}, minFreeMemory: ${minFreeMemory}, maxMemory: ${maxMemory}, totalMemory: ${totalMemory}`,\n        );\n\n        // We check to see if the total memory usage for this process is\n        // higher than what's allowed and, if so, we shut it down gracefully\n        if (totalMemory >= maxMemory) {\n            logger.info(\n                `Memory usage has gone over maximum. ` +\n                    `(used: ${totalMemory}), limit: ${maxMemory}`,\n            );\n            logger.info(\n                `Memory usage has gone over maximum. ` +\n                    `(used: ${totalMemory}), limit: ${maxMemory}`,\n            );\n            shutdown(server, logger);\n        } else {\n            logger.info(\n                `Memory usage has NOT gone over maximum. ` +\n                    `(used: ${totalMemory}), limit: ${maxMemory}`,\n            );\n        }\n\n        next();\n    };\n};\n"],"file":"make-memory-monitoring-middleware.js"}