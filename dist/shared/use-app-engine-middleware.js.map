{"version":3,"sources":["../../src/shared/use-app-engine-middleware.js"],"names":["useAppEngineMiddleware","app","mode","logger","wrappedApp","use","memoryMonitoringMiddleware"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAIA;;;AAGO,eAAeA,sBAAf,CACHC,GADG,EAEHC,IAFG,EAGHC,MAHG,EAI8B;AACjC,QAAMC,UAAU,GAAG,wBACf;AADe,GAEdC,GAFc,CAEV,MAAM,kDAAsBH,IAAtB,EAA4BC,MAA5B,CAFI,EAGf;AAHe,GAIdE,GAJc,CAIV,wEAAiCF,MAAjC,CAJU,EAKf;AALe,GAMdE,GANc,CAMV,mEANU,EAOf;AAPe,GAQdA,GARc,CAQVJ,GARU,EASf;AATe,GAUdI,GAVc,CAUV,8CAAoBF,MAApB,CAVU,CAAnB,CADiC,CAajC;;AACA,QAAMG,0BAA0B,GAAG,oEAA+BH,MAA/B,CAAnC;;AACA,MAAIG,0BAA0B,IAAI,IAAlC,EAAwC;AACpC,WAAOF,UAAU,CAACC,GAAX,CAAe,kCAAaC,0BAAb,CAAf,CAAP;AACH;;AACD,SAAOF,UAAP;AACH","sourcesContent":["// @flow\nimport express from \"express\";\nimport asyncHandler from \"express-async-handler\";\nimport type {$Application, $Request, $Response} from \"express\";\nimport {makeErrorMiddleware} from \"./middleware/make-error-middleware.js\";\nimport {makeRequestMiddleware} from \"./middleware/make-request-middleware.js\";\nimport {makeAppEngineRequestIDMiddleware} from \"./middleware/make-app-engine-request-id-middleware.js\";\nimport {makeMemoryMonitoringMiddleware} from \"./middleware/make-memory-monitoring-middleware.js\";\nimport {makeCloseConnectionMiddleware} from \"./middleware/make-close-connection-middleware.js\";\n\nimport type {Logger, Runtime} from \"./types.js\";\n\n/**\n * Apply the middleware that we want to use with Google App Engine (GAE).\n */\nexport async function useAppEngineMiddleware<TReq: $Request, TRes: $Response>(\n    app: $Application<TReq, TRes>,\n    mode: Runtime,\n    logger: Logger,\n): Promise<$Application<TReq, TRes>> {\n    const wrappedApp = express<TReq, TRes>()\n        // Add the request logging middleware.\n        .use(await makeRequestMiddleware(mode, logger))\n        // Add requestID middleware.\n        .use(makeAppEngineRequestIDMiddleware(logger))\n        // Add close connection middleware.\n        .use(makeCloseConnectionMiddleware())\n        // Add the app.\n        .use(app)\n        // Add the error logging middleware.\n        .use(makeErrorMiddleware(logger));\n\n    // Add memory monitoring, if it is supported.\n    const memoryMonitoringMiddleware = makeMemoryMonitoringMiddleware(logger);\n    if (memoryMonitoringMiddleware != null) {\n        return wrappedApp.use(asyncHandler(memoryMonitoringMiddleware));\n    }\n    return wrappedApp;\n}\n"],"file":"use-app-engine-middleware.js"}