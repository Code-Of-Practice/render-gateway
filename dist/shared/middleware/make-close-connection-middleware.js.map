{"version":3,"sources":["../../../src/shared/middleware/make-close-connection-middleware.js"],"names":["makeCloseConnectionMiddleware","middleware","req","res","next","set"],"mappings":";;;;;;;AAIA;;;;;AAKO,MAAMA,6BAA6B,GAAG,MAGd;AAC3B,QAAMC,UAIY,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3C;AACA;AACA;AACAD,IAAAA,GAAG,CAACE,GAAJ,CAAQ,YAAR,EAAsB,OAAtB;AACAD,IAAAA,IAAI;AACP,GAVD;;AAWA,SAAOH,UAAP;AACH,CAhBM","sourcesContent":["// @flow\nimport type {Middleware, $Request, $Response, NextFunction} from \"express\";\nimport type {RequestWithLog} from \"../types.js\";\n\n/**\n * We want to ensure that the client doesn't use Keep Alive to keep the HTTP\n * connection open to the server, so we send back a Connection: close header\n * to get it to close right away.\n */\nexport const makeCloseConnectionMiddleware = <\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(): Middleware<TReq, TRes> => {\n    const middleware: <TReq: RequestWithLog<$Request>, TRes: $Response>(\n        req: TReq,\n        res: TRes,\n        next: NextFunction,\n    ) => Promise<void> = async (req, res, next) => {\n        // Tell the client to not keep the connection alive, this will\n        // ensure that we're able to shutdown the server as soon as the\n        // request has finished.\n        res.set(\"Connection\", \"close\");\n        next();\n    };\n    return middleware;\n};\n"],"file":"make-close-connection-middleware.js"}