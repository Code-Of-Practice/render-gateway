{"version":3,"sources":["../../../src/shared/middleware/make-memory-monitoring-middleware.js"],"names":["makeMemoryMonitoringMiddleware","rootlogger","GAE_MEMORY_MB","MIN_FREE_MB","process","env","info","middleware","req","res","next","logger","gaeLimitBytes","parseFloat","minFreeBytes","maxAllowedBytes","totalUsageBytes","memoryUsage","rss","warn"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;;AAOO,MAAMA,8BAA8B,GAIvCC,UAJ0C,IAKhB;AAC1B,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,MAA+BC,OAAO,CAACC,GAA7C;;AACA,MAAI,CAACH,aAAD,IAAkB,CAACC,WAAvB,EAAoC;AAChC;AACAF,IAAAA,UAAU,CAACK,IAAX,CACI,yEADJ;AAGA,WAAO,IAAP;AACH;;AAEDL,EAAAA,UAAU,CAACK,IAAX,CAAiB,uCAAjB,EAAyD;AACrDJ,IAAAA,aADqD;AAErDC,IAAAA;AAFqD,GAAzD;;AAKA,QAAMI,UAIY,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AAC3C,UAAMC,MAAM,GAAG,wCAAiBV,UAAjB,EAA6BO,GAA7B,CAAf;AAEA,UAAMI,aAAa,GAAGC,UAAU,CAACX,aAAD,CAAV,GAA4B,IAA5B,GAAmC,IAAzD;AACA,UAAMY,YAAY,GAAGD,UAAU,CAACV,WAAD,CAAV,GAA0B,IAA1B,GAAiC,IAAtD;AACA,UAAMY,eAAe,GAAGH,aAAa,GAAGE,YAAxC;AACA,UAAME,eAAe,GAAGZ,OAAO,CAACa,WAAR,GAAsBC,GAA9C,CAN2C,CAQ3C;AACA;;AACA,QAAIF,eAAe,IAAID,eAAvB,EAAwC;AACpCJ,MAAAA,MAAM,CAACQ,IAAP,CAAY,oCAAZ,EAAkD;AAC9CH,QAAAA,eAD8C;AAE9CD,QAAAA;AAF8C,OAAlD;AAIA,YAAM,+BAAgBJ,MAAhB,CAAN;AACH,KAND,MAMO;AACHA,MAAAA,MAAM,CAACL,IAAP,CAAY,gCAAZ,EAA8C;AAC1CS,QAAAA,eAD0C;AAE1CC,QAAAA;AAF0C,OAA9C;AAIH;;AACDN,IAAAA,IAAI;AACP,GA3BD;;AA4BA,SAAOH,UAAP;AACH,CAjDM","sourcesContent":["// @flow\nimport type {Middleware, $Request, $Response, NextFunction} from \"express\";\nimport {getRequestLogger} from \"../get-request-logger.js\";\nimport {shutdownGateway} from \"../shutdown.js\";\nimport type {Logger, RequestWithLog} from \"../types.js\";\n\n/**\n * Check to see if there are ENV variables specified to limit the total\n * memory usage of a process. We look at the GAE_MEMORY_MB and MIN_FREE_MB\n * variables to compute out the maximum amount of memory this process\n * should be using. Then we compare it against what is actually being used\n * and if it's above that threshold we shutdown the server.\n */\nexport const makeMemoryMonitoringMiddleware = <\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(\n    rootlogger: Logger,\n): ?Middleware<TReq, TRes> => {\n    const {GAE_MEMORY_MB, MIN_FREE_MB} = process.env;\n    if (!GAE_MEMORY_MB || !MIN_FREE_MB) {\n        // We don't add this if these env vars aren't available.\n        rootlogger.info(\n            \"Memory monitoring disabled. Required environment variables unavailable.\",\n        );\n        return null;\n    }\n\n    rootlogger.info(`Creating memory monitoring middleware`, {\n        GAE_MEMORY_MB,\n        MIN_FREE_MB,\n    });\n\n    const middleware: <TReq: RequestWithLog<$Request>, TRes: $Response>(\n        req: TReq,\n        res: TRes,\n        next: NextFunction,\n    ) => Promise<void> = async (req, res, next) => {\n        const logger = getRequestLogger(rootlogger, req);\n\n        const gaeLimitBytes = parseFloat(GAE_MEMORY_MB) * 1024 * 1024;\n        const minFreeBytes = parseFloat(MIN_FREE_MB) * 1024 * 1024;\n        const maxAllowedBytes = gaeLimitBytes - minFreeBytes;\n        const totalUsageBytes = process.memoryUsage().rss;\n\n        // We check to see if the total memory usage for this process is\n        // higher than what's allowed and, if so, we shut it down gracefully\n        if (totalUsageBytes >= maxAllowedBytes) {\n            logger.warn(\"Memory usage is exceeding maximum.\", {\n                totalUsageBytes,\n                maxAllowedBytes,\n            });\n            await shutdownGateway(logger);\n        } else {\n            logger.info(\"Memory usage is within bounds.\", {\n                maxAllowedBytes,\n                totalUsageBytes,\n            });\n        }\n        next();\n    };\n    return middleware;\n};\n"],"file":"make-memory-monitoring-middleware.js"}