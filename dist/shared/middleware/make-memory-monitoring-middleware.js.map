{"version":3,"sources":["../../../src/shared/middleware/make-memory-monitoring-middleware.js"],"names":["makeMemoryMonitoringMiddleware","rootlogger","GAE_MEMORY_MB","MIN_FREE_MB","process","env","info","middleware","req","res","next","logger","warn","gaeLimitBytes","parseFloat","minFreeBytes","maxAllowedBytes","totalUsageBytes","memoryUsage","rss"],"mappings":";;;;;;;AAEA;;AACA;;AAGA;;;;;;;AAOO,MAAMA,8BAA8B,GAIvCC,UAJ0C,IAKjB;AACzB,QAAM;AAACC,IAAAA,aAAD;AAAgBC,IAAAA;AAAhB,MAA+BC,OAAO,CAACC,GAA7C;AACAJ,EAAAA,UAAU,CAACK,IAAX,CAAiB,uCAAjB,EAAyD;AACrDJ,IAAAA,aADqD;AAErDC,IAAAA;AAFqD,GAAzD;;AAKA,QAAMI,UAAU,GAAG,CACfC,GADe,EAEfC,GAFe,EAGfC,IAHe,KAIR;AACP,UAAMC,MAAM,GAAG,wCAAiBV,UAAjB,EAA6BO,GAA7B,CAAf;;AAEA,QAAI,CAACN,aAAD,IAAkB,CAACC,WAAvB,EAAoC;AAChCQ,MAAAA,MAAM,CAACC,IAAP,CACI,uEADJ;AAGAF,MAAAA,IAAI;AACJ;AACH;;AACD,UAAMG,aAAa,GAAGC,UAAU,CAACZ,aAAD,CAAV,GAA4B,IAA5B,GAAmC,IAAzD;AACA,UAAMa,YAAY,GAAGD,UAAU,CAACX,WAAD,CAAV,GAA0B,IAA1B,GAAiC,IAAtD;AACA,UAAMa,eAAe,GAAGH,aAAa,GAAGE,YAAxC;AACA,UAAME,eAAe,GAAGb,OAAO,CAACc,WAAR,GAAsBC,GAA9C;AAEAR,IAAAA,MAAM,CAACL,IAAP,CAAY,cAAZ,EAA4B;AACxBO,MAAAA,aADwB;AAExBE,MAAAA,YAFwB;AAGxBC,MAAAA,eAHwB;AAIxBC,MAAAA;AAJwB,KAA5B,EAfO,CAsBP;AACA;;AACA,QAAIA,eAAe,IAAID,eAAvB,EAAwC;AACpCL,MAAAA,MAAM,CAACC,IAAP,CAAY,oCAAZ,EAAkD;AAC9CK,QAAAA,eAD8C;AAE9CD,QAAAA;AAF8C,OAAlD;AAIA,qCAAgBL,MAAhB;AACH;;AACDD,IAAAA,IAAI;AACP,GApCD;;AAqCA,SAAOH,UAAP;AACH,CAlDM","sourcesContent":["// @flow\nimport type {Middleware, $Request, $Response, NextFunction} from \"express\";\nimport {getRequestLogger} from \"../get-request-logger.js\";\nimport {shutdownGateway} from \"../shutdown.js\";\nimport type {Logger, RequestWithLog} from \"../types.js\";\n\n/**\n * Check to see if there are ENV variables specified to limit the total\n * memory usage of a process. We look at the GAE_MEMORY_MB and MIN_FREE_MB\n * variables to compute out the maximum amount of memory this process\n * should be using. Then we compare it against what is actually being used\n * and if it's above that threshold we shutdown the server.\n */\nexport const makeMemoryMonitoringMiddleware = <\n    TReq: RequestWithLog<$Request>,\n    TRes: $Response,\n>(\n    rootlogger: Logger,\n): Middleware<TReq, TRes> => {\n    const {GAE_MEMORY_MB, MIN_FREE_MB} = process.env;\n    rootlogger.info(`Creating memory monitoring middleware`, {\n        GAE_MEMORY_MB,\n        MIN_FREE_MB,\n    });\n\n    const middleware = <TReq: RequestWithLog<$Request>, TRes: $Response>(\n        req: TReq,\n        res: TRes,\n        next: NextFunction,\n    ): void => {\n        const logger = getRequestLogger(rootlogger, req);\n\n        if (!GAE_MEMORY_MB || !MIN_FREE_MB) {\n            logger.warn(\n                \"Memory monitoring cannot be performed. Environment variables missing.\",\n            );\n            next();\n            return;\n        }\n        const gaeLimitBytes = parseFloat(GAE_MEMORY_MB) * 1024 * 1024;\n        const minFreeBytes = parseFloat(MIN_FREE_MB) * 1024 * 1024;\n        const maxAllowedBytes = gaeLimitBytes - minFreeBytes;\n        const totalUsageBytes = process.memoryUsage().rss;\n\n        logger.info(\"Memory check\", {\n            gaeLimitBytes,\n            minFreeBytes,\n            maxAllowedBytes,\n            totalUsageBytes,\n        });\n\n        // We check to see if the total memory usage for this process is\n        // higher than what's allowed and, if so, we shut it down gracefully\n        if (totalUsageBytes >= maxAllowedBytes) {\n            logger.warn(\"Memory usage is exceeding maximum.\", {\n                totalUsageBytes,\n                maxAllowedBytes,\n            });\n            shutdownGateway(logger);\n        }\n        next();\n    };\n    return middleware;\n};\n"],"file":"make-memory-monitoring-middleware.js"}