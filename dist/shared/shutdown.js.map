{"version":3,"sources":["../../src/shared/shutdown.js"],"names":["startedGateway","gatewayStarted","gateway","Error","shutdownGateway","logger","Promise","resolve","reject","debug","close","err","then","info","process","exit","catch","simplifiedError","error"],"mappings":";;;;;;;AACA;;AAGA,IAAIA,cAA4B,GAAG,IAAnC;AAEA;;;;;;;AAMO,MAAMC,cAA8C,GAAIC,OAAD,IAAa;AACvE,MAAIF,cAAc,IAAI,IAAtB,EAA4B;AACxB,UAAM,IAAIG,KAAJ,CAAU,0BAAV,CAAN;AACH;;AACDH,EAAAA,cAAc,GAAGE,OAAjB;AACH,CALM;AAOP;;;;;;;;;;;AAOO,MAAME,eAAkD,GAAIC,MAAD,IAC9D,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC7B,MAAIR,cAAc,IAAI,IAAtB,EAA4B;AACxBO,IAAAA,OAAO;AACP;AACH;;AACDF,EAAAA,MAAM,CAACI,KAAP,CAAa,kBAAb;AACAT,EAAAA,cAAc,CAACU,KAAf,CAAsBC,GAAD,IAAS;AAC1B,QAAIA,GAAJ,EAAS;AACLH,MAAAA,MAAM,CAACG,GAAD,CAAN;AACH,KAFD,MAEO;AACHJ,MAAAA,OAAO;AACV;AACJ,GAND;AAOH,CAbD,EAcKK,IAdL,CAcU,MAAM;AACRP,EAAAA,MAAM,CAACQ,IAAP,CAAY,wCAAZ;AACAC,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACA;AACH,CAlBL,EAmBKC,KAnBL,CAmBYL,GAAD,IAAS;AACZ,QAAMM,eAAe,GAAG,gCAAaN,GAAb,CAAxB;AACAN,EAAAA,MAAM,CAACa,KAAP,CAAa,uBAAb,EAAsCD,eAAtC;AACAH,EAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH,CAvBL,CADG","sourcesContent":["// @flow\nimport {extractError} from \"./extract-error.js\";\nimport type {Logger} from \"./types.js\";\n\nlet startedGateway: ?http$Server = null;\n\n/**\n * Register the started gateway.\n *\n * This sets the started gateway so that it can be shutdown when\n * `shutdownGateway` is invoked.\n */\nexport const gatewayStarted: (gateway: http$Server) => void = (gateway) => {\n    if (startedGateway != null) {\n        throw new Error(\"Gateway already started.\");\n    }\n    startedGateway = gateway;\n};\n\n/**\n * Shutdown the running gateway process.\n *\n * This closes any started express server and exits the process.\n * This must be written such that errors don't need to be handled by calling\n * code.\n */\nexport const shutdownGateway: (logger: Logger) => Promise<void> = (logger) =>\n    new Promise((resolve, reject) => {\n        if (startedGateway == null) {\n            resolve();\n            return;\n        }\n        logger.debug(\"Closing gateway.\");\n        startedGateway.close((err) => {\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    })\n        .then(() => {\n            logger.info(\"Gateway closed. Shutting down process.\");\n            process.exit(0);\n            return;\n        })\n        .catch((err) => {\n            const simplifiedError = extractError(err);\n            logger.error(\"Error closing gateway\", simplifiedError);\n            process.exit(1);\n        });\n"],"file":"shutdown.js"}